GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
  event.create('space_freezing')
//    .category('freezing')
    .setEUIO('in')
    .setMaxIOSize(2,2,2,2)
    .setSound(GTSoundEntries.COOLING)
})

GTCEuStartupEvents.registry('gtceu:machine', event => {
  event.create('zero_particle_vacuum_freezer', 'multiblock')
    .rotationState(RotationState.NON_Y_AXIS)
    .recipeTypes(['vacuum_freezer', 'space_freezing'])
    .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
    .pattern(def => FactoryBlockPattern.start()
        .aisle('AASAA','AASAA','SSSSS','AASAA','AASAA')
        .aisle('AASAA','A###A','S###S','A###A','AASAA')
        .aisle('SSSSS','S###S','S###S','S###S','SSSSS')
        .aisle('AASAA','A###A','S###S','A###A','AASAA')
        .aisle('AASAA','AASAA','SSCSS','AAMAA','AASAA')
      .where('C', Predicates.controller(Predicates.blocks(def.get())))
      .where('A', Predicates.blocks('gtceu:frostproof_machine_casing').setMinGlobalLimited(12)
          .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setExactLimit(1))
          .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2))
          .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(1))
          .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2))
          .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1)))
      .where('S', Predicates.blocks('gtceu:clean_machine_casing')
          .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
      .where('#', Predicates.air())
      .build())
    .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_clean_stainless_steel", "gtceu:block/multiblock/implosion_compressor/base", false)

})
