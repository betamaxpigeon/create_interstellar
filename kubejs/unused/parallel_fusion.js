GTCEuStartupEvents.registry('gtceu:machine', event => {
  event.create('parallel_fusion_reactor_mk1', 'multiblock')
    .rotationState(RotationState.NON_Y_AXIS)
    .recipeType('fusion_reactor')
    .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_PERFECT])
    .appearanceBlock('kubejs:block.parallel_fusion_casing_mk1')
    .pattern(def => FactoryBlockPattern()
      .aisle('               ','      PCP      ','               ')
      .aisle('      PCP      ','    CC   CC    ','      PCP      ')
      .aisle('    CC   CC    ','   E  CCC  E   ','    CC   CC    ')
      .aisle('   C       C   ','  E EC   CE E  ','   C       C   ')
      .aisle('  C         C  ',' C E       E C ','  C         C  ')
      .aisle('  C         C  ',' C C       C C ','  C         C  ')
      .aisle(' P           P ','P C         C P',' P           P ')
      .aisle(' C           C ','C C         C C',' C           C ')
      .aisle(' P           P ','P C         C P',' P           P ')
      .aisle('  C         C  ',' C C       C C ','  C         C  ')
      .aisle('  C         C  ',' C E       E C ','  C         C  ')
      .aisle('   C       C   ','  E EC   CE E  ','   C       C   ')
      .aisle('    CC   CC    ','   E  CMC  E   ','    CC   CC    ')
      .aisle('      PCP      ','    CC   CC    ','      PMP      ')
      .aisle('               ','      PAP      ','               ')
      .where('A',Predicates.controller(Predicates.blocks(def.get())))
      .where('M',Predicates.abilities(PartAbility.INPUT_ENERGY).setExactLimit(16))
      .where('M',Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)
        .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setExactLimit(1)))
      .where('C',Predicates.blocks('kubejs:block.parallel_fusion_casing_mk1'))
      .where('P',Predicates.blocks('kubejs:block.parallel_fusion_casing_mk1')
        .or(Predicates.autoAbilities(def.getRecipeTypes())))
      .where(' ',Predicates.any())
      .build())
})
